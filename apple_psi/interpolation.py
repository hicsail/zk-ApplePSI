from picozk import *
from curvepoint import CurvePoint


def calc_lagrange_terms(xs, ys, cuckoo_table, p):
    assert len(xs) == len(ys)
    n = len(xs)

    # Preprocessing Lgrange Polynomial (Only terms)
    lagrange_bases = {}  # idx in cuckoo table (key): terms (value)

    denominators = []
    for i in range(n):
        denominator = 1
        for j in range(n):
            if j != i:
                denominator *= modular_inverse(xs[i] - xs[j], p)
        denominators.append(denominator)

    # Calculate terms for all index in the cuckoo table
    for idx, _ in enumerate(cuckoo_table.table):
        terms = []
        for i in range(n):
            term = ys[i]
            numerator = 1
            for j in range(n):
                if j != i:
                    numerator *= idx - xs[j]
            term = term.scale(numerator * denominators[i] % p)
            terms.append(term)
        lagrange_bases[idx] = terms
    _terms = {0: [CurvePoint(is_infinity=False, x=90094422943321314207058851240239808870414621916050124828684358028897775576006, y=108578305976517028830322204933602338993302689974404307996049981653149565653703, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=True, x=0, y=0, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=True, x=0, y=0, p=115792089237316195423570985008687907853269984665640564039457584007908834671663)], 1: [CurvePoint(is_infinity=True, x=0, y=0, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=False, x=10157760668567613465900040494733225921671659909870612417809483248097326335880, y=37674699084873029594178945979420673592754951593511996333384002113009473249380, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=True, x=0, y=0, p=115792089237316195423570985008687907853269984665640564039457584007908834671663)], 2: [CurvePoint(is_infinity=True, x=0, y=0, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=True, x=0, y=0, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=False, x=17136757849927752745205382383109844381056385676206962696615894972524613244840, y=51205854624749739556354727798176745738753011491453557497102975187014090965090, p=115792089237316195423570985008687907853269984665640564039457584007908834671663)], 3: [CurvePoint(is_infinity=False, x=90094422943321314207058851240239808870414621916050124828684358028897775576006, y=108578305976517028830322204933602338993302689974404307996049981653149565653703, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=False, x=89318132693638147717473684858662696162674005237084678401483701900965616051033, y=11994087030198246300730715548055536474912089400343197999489974321870262770540, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=False, x=6783642654263274124426807137038812478730503522278752652535357794549999247488, y=14063889078508034357032181453095155843148639862975072392552982620425145336304, p=115792089237316195423570985008687907853269984665640564039457584007908834671663)], 4: [CurvePoint(is_infinity=False, x=97346558458289621773759806725464566289112962032272284036926708301814938887301, y=23807718602230530645331554922726208550885401542893381857681104666105164930093, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=False, x=91473283216594915995754954419611910051318613469593153783905729004519054746275, y=35691279023194825959626418791226874768330375479453534938857186410762440192906, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=False, x=52418736302764210537258164359127582933529329425215590012366700719451811709822, y=107012800172401891500483515772470203690610796281514267655315836316876768061252, p=115792089237316195423570985008687907853269984665640564039457584007908834671663)], 5: [CurvePoint(is_infinity=False, x=31350255155425705156890406456915303705515890346740966909112395938209092165957, y=52076121906320827893889546562227177637532175848456658772898110115510443067158, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=False, x=26489456678231113310888108181037893861589957014164164549192351780553685490682, y=48460077301406170703315415873358824091275982623981173810667464237186107430333, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=False, x=97899799960030111968521144325575814320998971645182560164104883201398263294008, y=5237152742980458192286799555481703184026098583341201642603185874005374450333, p=115792089237316195423570985008687907853269984665640564039457584007908834671663)], 6: [CurvePoint(is_infinity=False, x=36151550121369411590142590320267288241748566420210775302856432935022426971553, y=73384227547371727124525297249164366914259983061695582285827861576004938710475, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=False, x=108423951857752232602418141378692438462322227550534708122331361770745599373670, y=26330025169106171311533076263602791179822417215083551578734157349978792617748, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=False, x=66717980692814416167932958113870140849906019357023431761020985343442732420962, y=20294185388668575749141448306890509369578070619496513349337905353957480256213, p=115792089237316195423570985008687907853269984665640564039457584007908834671663)], 7: [CurvePoint(is_infinity=False, x=74284746263592247819541161228959362661273171989881546581087056414022825137582, y=13355253349395030458917496651987220343432285763105041756718522543434474696914, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=False, x=110454954216524777831192711294052528293454408281378664759767141767519022817991, y=52383345543641873153542215338518373087558511876260351272224561654772551699411, p=115792089237316195423570985008687907853269984665640564039457584007908834671663), CurvePoint(is_infinity=False, x=56382610817834737874923994901871338917752748752529268503283996842063267318360, y=101449614646033101202883530502504882198221701684215411404262993712081279552471, p=115792089237316195423570985008687907853269984665640564039457584007908834671663)]}
    assert _terms == lagrange_bases
    return lagrange_bases


def calc_polynomial(idx, lagrange_bases):
    result = None
    terms = lagrange_bases[idx]
    for term in terms:
        if result is None:
            result = term
        else:
            if result.x != term.x or result.y != term.y:
                result = result.add(term)
            else:
                result = result.scale(2)
    return result, len(lagrange_bases[0]) - 1
